# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/aafwk/standard/aafwk.gni")

module_output_path = "ability_runtime/abilitymgr"

ohos_unittest("pending_want_key_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${aafwk_path}/services/abilitymgr/include",
    "${aafwk_path}/interfaces/innerkits/want/include/ohos/aafwk/content",
  ]

  sources = [
    "${aafwk_path}/services/abilitymgr/test/mock/libs/appexecfwk_core/src/appmgr/mock_app_scheduler.cpp",
    "pending_want_key_test.cpp",  # add mock file
  ]

  configs = [ "${services_path}/abilitymgr:abilityms_config" ]

  deps = [
    "${aafwk_path}/frameworks/kits/ability/native:abilitykit_native",
    "${aafwk_path}/frameworks/kits/ability/native:dummy_classes",
    "${aafwk_path}/interfaces/innerkits/uri:zuri",
    "${aafwk_path}/services/abilitymgr:abilityms",
    "${appexecfwk_path}/interfaces/innerkits/appexecfwk_base:appexecfwk_base",
    "${appexecfwk_path}/interfaces/innerkits/libeventhandler:libeventhandler",
    "${innerkits_path}/want:want",
    "${services_path}/abilitymgr/test:abilityms_test_source",
    "${services_path}/abilitymgr/test/mock/libs/aakit:aakit_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_bundlemgr_mock",
    "${services_path}/common:perm_verification",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/libpng:libpng",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

group("unittest") {
  testonly = true

  deps = [ ":pending_want_key_test" ]
}
