# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/abilitymgr"

ohos_unittest("data_ability_record_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${services_path}/abilitymgr/test/mock/libs/system_ability_mock",
    "${services_path}/abilitymgr/test/mock/libs/ability_scheduler_mock",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "${bundlefwk_inner_api_path}/appexecfwk_base/include",
    "${ability_runtime_path}/interfaces/inner_api/ability_manager/include",
    "${ability_runtime_path}/frameworks/kits/ability/native/include",
    "${ability_runtime_path}/services/common/include",
  ]

  sources = [
    "${ability_runtime_path}/services/abilitymgr/test/mock/libs/appexecfwk_core/src/appmgr/mock_app_scheduler.cpp",
    "data_ability_record_test.cpp",  # add mock file
  ]

  configs = [
    "${services_path}/abilitymgr:abilityms_config",
    "${ability_base_path}:base_public_config",
    "${services_path}/abilitymgr/test/mock:aafwk_mock_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_path}/frameworks/kits/ability/native:abilitykit_native",
    "${ability_runtime_path}/services/abilitymgr:abilityms",
    "${services_path}/abilitymgr/test:abilityms_test_source",
    "${services_path}/abilitymgr/test/mock/libs/aakit:aakit_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_bundlemgr_mock",
    "${services_path}/common:perm_verification",

    #"${bundlefwk_inner_api_path}/appexecfwk_base:appexecfwk_base",
    "//base/notification/eventhandler/frameworks/eventhandler:libeventhandler",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/libpng:libpng",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }
}

group("unittest") {
  testonly = true

  deps = [ ":data_ability_record_test" ]
}
