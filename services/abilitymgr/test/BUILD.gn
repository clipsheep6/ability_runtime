# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/aafwk.gni")
import(
    "//foundation/ability/ability_runtime/services/abilitymgr/abilitymgr.gni")

ohos_source_set("abilityms_test_source") {
  cflags_cc = []
  sources = [
    "${services_path}/abilitymgr/src/ability_connect_callback_stub.cpp",
    "${services_path}/abilitymgr/src/ability_connect_manager.cpp",
    "${services_path}/abilitymgr/src/ability_event_handler.cpp",
    "${services_path}/abilitymgr/src/ability_manager_proxy.cpp",
    "${services_path}/abilitymgr/src/ability_manager_service.cpp",
    "${services_path}/abilitymgr/src/ability_manager_stub.cpp",
    "${services_path}/abilitymgr/src/ability_record.cpp",
    "${services_path}/abilitymgr/src/ability_scheduler_proxy.cpp",
    "${services_path}/abilitymgr/src/ability_scheduler_stub.cpp",
    "${services_path}/abilitymgr/src/ability_start_setting.cpp",
    "${services_path}/abilitymgr/src/ability_token_stub.cpp",
    "${services_path}/abilitymgr/src/ams_configuration_parameter.cpp",
    "${services_path}/abilitymgr/src/app_no_response_disposer.cpp",
    "${services_path}/abilitymgr/src/atomic_service_status_callback.cpp",
    "${services_path}/abilitymgr/src/atomic_service_status_callback_proxy.cpp",
    "${services_path}/abilitymgr/src/atomic_service_status_callback_stub.cpp",
    "${services_path}/abilitymgr/src/background_task_observer.cpp",
    "${services_path}/abilitymgr/src/call_container.cpp",
    "${services_path}/abilitymgr/src/call_record.cpp",
    "${services_path}/abilitymgr/src/caller_info.cpp",
    "${services_path}/abilitymgr/src/connection_record.cpp",
    "${services_path}/abilitymgr/src/data_ability_caller_recipient.cpp",
    "${services_path}/abilitymgr/src/data_ability_manager.cpp",
    "${services_path}/abilitymgr/src/data_ability_record.cpp",
    "${services_path}/abilitymgr/src/free_install_manager.cpp",
    "${services_path}/abilitymgr/src/launch_param.cpp",
    "${services_path}/abilitymgr/src/lifecycle_deal.cpp",
    "${services_path}/abilitymgr/src/lifecycle_state_info.cpp",
    "${services_path}/abilitymgr/src/pending_want_common_event.cpp",
    "${services_path}/abilitymgr/src/pending_want_key.cpp",
    "${services_path}/abilitymgr/src/pending_want_manager.cpp",
    "${services_path}/abilitymgr/src/pending_want_record.cpp",
    "${services_path}/abilitymgr/src/sender_info.cpp",
    "${services_path}/abilitymgr/src/task_data_persistence_mgr.cpp",
    "${services_path}/abilitymgr/src/user_controller.cpp",
    "${services_path}/abilitymgr/src/user_event_handler.cpp",
    "${services_path}/abilitymgr/src/want_receiver_proxy.cpp",
    "${services_path}/abilitymgr/src/want_receiver_stub.cpp",
    "${services_path}/abilitymgr/src/want_sender_info.cpp",
    "${services_path}/abilitymgr/src/want_sender_proxy.cpp",
    "${services_path}/abilitymgr/src/want_sender_stub.cpp",
    "${services_path}/abilitymgr/src/wants_info.cpp",
    "${services_path}/common/src/event_report.cpp",
  ]

  if (ability_runtime_graphics) {
    sources += [ "${services_path}/abilitymgr/src/system_dialog_scheduler.cpp" ]
  }

  include_dirs = [
    "${bundlefwk_inner_api_path}/appexecfwk_core/include/",
    "${services_path}/abilitymgr/test/mock/libs/system_ability_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "${aafwk_path}/interfaces/inner_api/app_manager/include/appmgr",
    "${aafwk_path}/interfaces/kits/native/ability/native/distributed_ability_runtime",
    "${aafwk_path}/interfaces/inner_api/dataobs_manager/include",
    "//base/account/os_account/frameworks/common/account_error/include",
    "//base/account/os_account/frameworks/common/database/include",
    "//base/account/os_account/interfaces/innerkits/osaccount/native/include",
    "//base/hiviewdfx/hicollie/interfaces/native/innerkits/include/xcollie",
  ]

  external_dependent_files = [
    "${aafwk_path}/services/abilitymgr/test/mock/libs/appexecfwk_core/src/appmgr/app_state_callback_host.cpp",
    "${aafwk_path}/services/abilitymgr/test/mock/libs/appexecfwk_core/src/appmgr/app_mgr_client.cpp",
    "${aafwk_path}/services/abilitymgr/test/mock/libs/appexecfwk_core/src/appmgr/app_state_callback_proxy.cpp",
  ]

  sources += external_dependent_files

  public_configs = [
    "${services_path}/abilitymgr:abilityms_config",
    "${services_path}/abilitymgr/test/mock:aafwk_mock_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${aafwk_path}/interfaces/inner_api/app_manager:app_manager",
    "${ability_base_path}:base",
    "${ability_base_path}:want",
    "${bundlefwk_inner_api_path}/appexecfwk_base:appexecfwk_base",
    "${innerkits_path}/uri_permission:uri_permission_mgr",
    "${services_path}/abilitymgr/test/mock/libs/sa_mgr:sa_mgr_mock",
    "//base/hiviewdfx/hiview/adapter/utility:hiview_adapter_utility",
    "//base/notification/eventhandler/frameworks/eventhandler:libeventhandler",
    "//utils/native/base:utils",
  ]

  if (os_account_part_enabled) {
    cflags_cc += [ "-DOS_ACCOUNT_PART_ENABLED" ]
    deps += [ "//base/account/os_account/frameworks/osaccount/native:os_account_innerkits" ]
  }

  if (ability_runtime_graphics) {
    sources += [
      "${services_path}/abilitymgr/src/image_info.cpp",
      "${services_path}/abilitymgr/src/inner_mission_info.cpp",
      "${services_path}/abilitymgr/src/mission.cpp",
      "${services_path}/abilitymgr/src/mission_data_storage.cpp",
      "${services_path}/abilitymgr/src/mission_info.cpp",
      "${services_path}/abilitymgr/src/mission_info_mgr.cpp",
      "${services_path}/abilitymgr/src/mission_list.cpp",
      "${services_path}/abilitymgr/src/mission_list_manager.cpp",
      "${services_path}/abilitymgr/src/mission_listener_controller.cpp",
      "${services_path}/abilitymgr/src/mission_listener_proxy.cpp",
      "${services_path}/abilitymgr/src/mission_listener_stub.cpp",
      "${services_path}/abilitymgr/src/mission_snapshot.cpp",
      "${services_path}/abilitymgr/src/remote_mission_listener_proxy.cpp",
      "${services_path}/abilitymgr/src/remote_mission_listener_stub.cpp",
    ]
    deps += [
      "${global_path}/i18n/frameworks/intl:intl_util",
      "${graphic_path}:libwmservice",
      "${multimedia_path}/interfaces/innerkits:image_native",
      "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
      "//third_party/icu/icu4c:shared_icuuc",
    ]
  }

  external_deps = [
    "ability_base:configuration",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "dataability:native_dataability",
    "dsoftbus_standard:softbus_client",
    "hicollie_native:libhicollie",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "relational_store:native_appdatafwk",
    "relational_store:native_rdb",
    "resource_management:global_resmgr",
  ]

  if (ability_runtime_graphics) {
    external_deps += [ "window_manager:libdm" ]
  }
}

group("unittest") {
  testonly = true

  deps = [
    "unittest/phone/ability_connect_callback_proxy_test:unittest",
    "unittest/phone/ability_connect_callback_stub_test:unittest",
    "unittest/phone/ability_connect_manage_test:unittest",
    "unittest/phone/ability_manager_client_test:unittest",
    "unittest/phone/ability_manager_proxy_test:unittest",
    "unittest/phone/ability_manager_service_account_test:unittest",
    "unittest/phone/ability_manager_service_anr_test:unittest",
    "unittest/phone/ability_manager_stub_test:unittest",
    "unittest/phone/ability_record_dump_test:unittest",
    "unittest/phone/ability_record_test:unittest",
    "unittest/phone/ability_scheduler_proxy_test:unittest",
    "unittest/phone/ability_scheduler_stub_test:unittest",
    "unittest/phone/ability_service_start_test:unittest",
    "unittest/phone/ability_timeout_test",
    "unittest/phone/ability_token_proxy_test:unittest",
    "unittest/phone/ability_token_stub_test:unittest",
    "unittest/phone/app_scheduler_test:unittest",
    "unittest/phone/configuration_test:unittest",
    "unittest/phone/connection_record_test:unittest",
    "unittest/phone/data_ability_manager_test:unittest",
    "unittest/phone/data_ability_record_test:unittest",
    "unittest/phone/lifecycle_deal_test:unittest",
    "unittest/phone/lifecycle_test:unittest",
    "unittest/phone/pending_want_key_test:unittest",
    "unittest/phone/pending_want_manager_dump_test:unittest",
    "unittest/phone/pending_want_manager_test:unittest",
    "unittest/phone/pending_want_record_test:unittest",
    "unittest/phone/running_infos_test:unittest",
    "unittest/phone/sender_info_test:unittest",
    "unittest/phone/want_receiver_proxy_test:unittest",
    "unittest/phone/want_receiver_stub_test:unittest",
    "unittest/phone/want_sender_info_test:unittest",
    "unittest/phone/want_sender_proxy_test:unittest",
    "unittest/phone/want_sender_stub_test:unittest",
    "unittest/phone/wants_info_test:unittest",
  ]

  if (ability_runtime_graphics) {
    deps += [
      "unittest/phone/call_container_test:unittest",
      "unittest/phone/mission_list_dump_test:unittest",
      "unittest/phone/mission_list_manager_dump_test:unittest",
      "unittest/phone/mission_list_manager_test:unittest",
      "unittest/phone/mission_list_manager_ut_test:unittest",
      "unittest/phone/mission_list_test:unittest",
      "unittest/phone/specified_mission_list_test:unittest",
      "unittest/phone/start_option_display_id_test:unittest",
    ]
  }
}
