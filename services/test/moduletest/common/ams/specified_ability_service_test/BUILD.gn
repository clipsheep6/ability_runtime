# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/aafwk/standard/aafwk.gni")
import("//foundation/aafwk/standard/feature.gni")

module_output_path = "ability_runtime/mstabilitymgrservice"

ohos_moduletest("specified_ability_service_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${services_path}/test/mock/include",
    "//third_party/jsoncpp/include",
    "//foundation/aafwk/standard/frameworks/kits/ability/native/include/distributed_ability_runtime",
    "//foundation/aafwk/standard/interfaces/innerkits/dataobs_manager/include",
    "//base/hiviewdfx/hicollie/interfaces/native/innerkits/include/xcollie",
  ]

  sources = [ "specified_ability_service_test.cpp" ]
  sources += [
    "//foundation/aafwk/standard/services/abilitymgr/src/ability_manager_proxy.cpp",
    "//foundation/aafwk/standard/services/abilitymgr/src/ability_manager_service.cpp",
    "//foundation/aafwk/standard/services/abilitymgr/test/mock/libs/sa_mgr/src/sa_mgr_client_mock.cpp",
    "//foundation/aafwk/standard/services/common/src/permission_verification.cpp",
    "//foundation/aafwk/standard/services/test/mock/src/mock_app_mgr_client.cpp",
    "//foundation/aafwk/standard/services/test/mock/src/mock_bundle_mgr.cpp",
    "//foundation/distributedhardware/devicemanager/test/unittest/mock/parameter.cpp",
  ]

  configs = [
    "${services_path}/test:aafwk_module_test_config",
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager:ability_manager_public_config",
    "//foundation/aafwk/standard/services/abilitymgr/test/mock/libs/sa_mgr:sa_mgr_mock_config",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base:appexecfwk_base_sdk_config",
    "${aafwk_path}/interfaces/innerkits/app_manager:appmgr_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${aafwk_path}/interfaces/innerkits/app_manager:app_manager",
    "${innerkits_path}/uri_permission:uri_permission_mgr",
    "${innerkits_path}/want:want",
    "//base/account/os_account/frameworks/osaccount/native:os_account_innerkits",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:dummy_classes",
    "//foundation/aafwk/standard/interfaces/innerkits/uri:zuri",
    "//foundation/aafwk/standard/services/abilitymgr:abilityms",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base:appexecfwk_base",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_core:appexecfwk_core",
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
    "//utils/native/base:utils",
  ]

  if (ability_runtime_graphics) {
    deps += [
      "//base/global/i18n/frameworks/intl:intl_util",
      "//foundation/ace/ace_engine/interfaces/innerkits/ui_service_manager:ui_service_mgr",
      "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
      "//third_party/libpng:libpng",
    ]
  }

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bytrace_standard:bytrace_core",
    "ces_standard:cesfwk_core",
    "ces_standard:cesfwk_innerkits",
    "dsoftbus_standard:softbus_client",
    "hicollie_native:libhicollie",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "native_appdatamgr:native_appdatafwk",
    "native_appdatamgr:native_dataability",
    "native_appdatamgr:native_rdb",
  ]

  if (ability_runtime_graphics) {
    external_deps += [ "window_manager:libdm" ]
  }
}

group("moduletest") {
  testonly = true
  # deps = [ ":specified_ability_service_test" ]
}
