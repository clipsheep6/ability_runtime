# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("//foundation/aafwk/standard/aafwk.gni")
import("//foundation/aafwk/standard/feature.gni")
import("//foundation/aafwk/standard/services/abilitymgr/abilitymgr.gni")

module_output_path = "ability_runtime/mstabilitymgrservice"

ohos_moduletest("dump_module_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${services_path}/abilitymgr/test/mock/libs/system_ability_mock",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "//foundation/aafwk/standard/services/test/moduletest/module_test_dump_util/",
    "//foundation/aafwk/standard/services/test/mock/include",
    "//foundation/windowmanager/utils/include",
  ]

  sources = [
    "//foundation/aafwk/standard/services/abilitymgr/src/app_scheduler.cpp",
    "//foundation/aafwk/standard/services/test/moduletest/module_test_dump_util/module_test_dump_util.cpp",
    "dump_module_test.cpp",
  ]

  sources += free_install

  configs = [
    "${services_path}/abilitymgr:abilityms_config",
    "${services_path}/abilitymgr/test/mock:aafwk_mock_config",
    "//foundation/aafwk/standard/services/test/moduletest/module_test_dump_util:module_test_dump_util_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${innerkits_path}/ability_manager:ability_manager",
    "${innerkits_path}/uri:zuri",
    "${innerkits_path}/want:want",
    "${services_path}/abilitymgr/test:abilityms_test_source",
    "${services_path}/abilitymgr/test/mock/appmgr_test_service:appmgr_test_service",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_bundlemgr_mock",
    "${services_path}/common:perm_verification",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:dummy_classes",
    "//foundation/aafwk/standard/services/test/moduletest/module_test_dump_util:module_test_dump_util_lib",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base:appexecfwk_base",
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  if (ability_runtime_graphics) {
    deps += [
      "//base/global/i18n/frameworks/intl:intl_util",
      "//third_party/libpng:libpng",
    ]
  }

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bytrace_standard:bytrace_core",
    "device_manager_base:devicemanagersdk",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

group("moduletest") {
  testonly = true
  deps = [ ":dump_module_test" ]
}
