# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")
import(
    "//foundation/ability/ability_runtime/services/abilitymgr/abilitymgr.gni")

module_output_path = "ability_runtime/mstabilitymgrservice"

ohos_moduletest("PandingWantMgrTest") {
  module_out_path = module_output_path
  cflags_cc = []
  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime",
    "${ability_runtime_path}/services/test/mock/include",
    "${ability_runtime_path}/interfaces/kits/native/appkit/app",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "${distributedschedule_path}/samgr/adapter/interfaces/innerkits/include/",
    "//third_party/jsoncpp/include",
  ]

  sources = [
    "${ability_runtime_services_path}/abilitymgr/src/ability_manager_client.cpp",
    "${ability_runtime_services_path}/abilitymgr/test/mock/libs/sa_mgr/src/sa_mgr_client_mock.cpp",
    "${ability_runtime_services_path}/test/mock/src/mock_app_mgr_client.cpp",
    "${ability_runtime_services_path}/test/mock/src/mock_bundle_mgr.cpp",
    "panding_want_manager_test.cpp",
  ]

  configs = [ "${ability_runtime_services_path}/abilitymgr:abilityms_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_innerkits_path}/wantagent:wantagent_innerkits",
    "${ability_runtime_path}/frameworks/native/ability/native:abilitykit_native",
    "${ability_runtime_path}/frameworks/native/appkit:app_context",
    "${ability_runtime_path}/interfaces/inner_api/app_manager:app_manager",
    "${ability_runtime_services_path}/common:perm_verification",
    "${distributedschedule_path}/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "dsoftbus:softbus_client",
    "eventhandler:libeventhandler",
    "hicollie_native:libhicollie",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "relational_store:native_appdatafwk",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
  ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }

  if (ability_runtime_graphics) {
    deps += [
      "${global_path}/i18n/frameworks/intl:intl_util",
      "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
      "//third_party/libpng:libpng",
    ]

    external_deps += [ "multimedia_image_standard:image_native" ]
  }
}

group("moduletest") {
  testonly = true
  # deps = [ ":PandingWantMgrTest" ]
}
