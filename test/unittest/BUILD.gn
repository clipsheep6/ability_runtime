# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")
import(
    "//foundation/ability/ability_runtime/services/abilitymgr/abilitymgr.gni")

config("appmgr_test_config") {
  configs = [
    "${ability_runtime_services_path}/appmgr:appmgr_config",
    "${ability_runtime_innerkits_path}/app_manager:appmgr_sdk_config",
    "${ability_runtime_test_path}/moduletest:services_mock_ams_config",
  ]

  defines = [
    "AMS_LOG_TAG = \"AppMgrService\"",
    "AMS_LOG_DOMAIN = 0xD00111E",
  ]

  include_dirs = [
    "${ability_runtime_test_path}/mock/services_appmgr_test/include",
    "${global_path}/i18n/frameworks/intl/include",
  ]
}

ohos_source_set("appmgr_test_source") {
  testonly = true

  sources = []

  include_dirs = [ "//third_party/json/include" ]

  public_configs = [
    ":appmgr_test_config",
    "//utils/native/base:utils_config",
  ]

  public_deps = [
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
  ]

  if (ability_runtime_graphics) {
    deps += [ "${global_path}/i18n/frameworks/intl:intl_util" ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]

  subsystem_name = "ability"
  part_name = "ability_runtime"
}

ohos_source_set("abilityms_test_source") {
  cflags_cc = []
  sources = []

  include_dirs = [
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/system_ability_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_path}/interfaces/kits/native/ability/native/distributed_ability_runtime",
    "${ability_runtime_innerkits_path}/dataobs_manager/include",
  ]

  public_configs = [
    "${ability_runtime_services_path}/abilitymgr:abilityms_config",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test:aafwk_mock_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_innerkits_path}/uri_permission:uri_permission_mgr",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/sa_mgr:sa_mgr_mock",
    "//base/hiviewdfx/hiview/adapter/utility:hiview_adapter_utility",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "dsoftbus:softbus_client",
    "eventhandler:libeventhandler",
    "hicollie_native:libhicollie",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "relational_store:native_appdatafwk",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
    "resource_management:global_resmgr",
  ]

  if (efficiency_manager) {
    cflags_cc += [ "-DEFFICIENCY_MANAGER_ENABLE" ]
    external_deps += [ "efficiency_manager:suspend_manager_client" ]
  }

  if (ability_runtime_graphics) {
    sources += []
    deps += [
      "${ability_runtime_services_path}/abilitymgr:abilityms",
      "${ace_engine_path}/interfaces/inner_api/ui_service_manager:ui_service_mgr",
      "${global_path}/i18n/frameworks/intl:intl_util",
      "${multimedia_path}/interfaces/innerkits:image_native",
      "//third_party/icu/icu4c:shared_icuuc",
    ]
    external_deps += [ "window_manager:libdm" ]
  }

  subsystem_name = "ability"
  part_name = "ability_runtime"
}

group("unittest") {
  testonly = true

  deps = [
    "ability_connect_callback_proxy_test:unittest",
    "ability_connect_callback_stub_test:unittest",
    "ability_connect_manage_test:unittest",
    "ability_manager_client_test:unittest",
    "ability_manager_proxy_test:unittest",
    "ability_manager_service_account_test:unittest",
    "ability_manager_service_anr_test:unittest",
    "ability_manager_stub_test:unittest",
    "ability_record_dump_test:unittest",
    "ability_record_test:unittest",
    "ability_scheduler_proxy_test:unittest",
    "ability_scheduler_stub_test:unittest",
    "ability_service_start_test:unittest",
    "ability_timeout_test",
    "ability_token_proxy_test:unittest",
    "ability_token_stub_test:unittest",
    "ams_ability_running_record_test:unittest",
    "ams_app_death_recipient_test:unittest",
    "ams_app_life_cycle_test:unittest",
    "ams_app_mgr_client_test:unittest",
    "ams_app_running_record_test:unittest",
    "ams_app_state_callback_test:unittest",
    "ams_app_workflow_test:unittest",
    "ams_ipc_interface_test:unittest",
    "ams_mgr_kill_process_test:unittest",
    "ams_mgr_proxy_test:unittest",
    "ams_mgr_scheduler_dump_test:unittest",
    "ams_mgr_scheduler_test:unittest",
    "ams_mgr_stub_test:unittest",
    "ams_recent_app_list_test:unittest",
    "ams_service_app_spawn_client_test:unittest",
    "ams_service_app_spawn_msg_wrapper_test:unittest",
    "ams_service_app_spawn_socket_test:unittest",
    "ams_service_event_drive_test:unittest",
    "ams_service_load_ability_process_test:unittest",
    "ams_service_startup_test:unittest",
    "app_mgr_proxy_test:unittest",
    "app_mgr_service_dump_test:unittest",
    "app_mgr_service_event_handler_test:unittest",
    "app_mgr_service_inner_test:unittest",
    "app_mgr_stub_test:unittest",
    "app_running_processes_info_test:unittest",
    "app_scheduler_test:unittest",
    "completed_dispatcher_test:unittest",
    "configuration_test:unittest",
    "connection_record_test:unittest",
    "data_ability_manager_test:unittest",
    "data_ability_observer_proxy_test:unittest",
    "data_ability_observer_stub_test:unittest",
    "data_ability_record_test:unittest",
    "dataobs_mgr_client_test:unittest",
    "dataobs_mgr_inner_test:unittest",
    "dataobs_mgr_proxy_test:unittest",
    "dataobs_mgr_service_test:unittest",
    "dataobs_mgr_stub_test:unittest",
    "frameworks_kits_ability_ability_runtime_test:unittest",
    "frameworks_kits_ability_native_test:unittest",
    "frameworks_kits_appkit_native_test:unittest",
    "lifecycle_deal_test:unittest",
    "lifecycle_test:unittest",
    "pending_want_key_test:unittest",
    "pending_want_manager_dump_test:unittest",
    "pending_want_manager_test:unittest",
    "pending_want_record_test:unittest",
    "pending_want_test:unittest",
    "running_infos_test:unittest",
    "sender_info_test:unittest",
    "trigger_Info_test:unittest",
    "want_agent_helper_test:unittest",
    "want_agent_info_test:unittest",
    "want_agent_test:unittest",
    "want_receiver_proxy_test:unittest",
    "want_receiver_stub_test:unittest",
    "want_sender_info_test:unittest",
    "want_sender_proxy_test:unittest",
    "want_sender_stub_test:unittest",
    "wants_info_test:unittest",
  ]

  if (ability_runtime_graphics) {
    deps += [
      "call_container_test:unittest",
      "mission_list_dump_test:unittest",
      "mission_list_manager_dump_test:unittest",
      "mission_list_manager_test:unittest",
      "mission_list_manager_ut_test:unittest",
      "mission_list_test:unittest",
      "specified_mission_list_test:unittest",
      "start_option_display_id_test:unittest",
    ]
  }
}
