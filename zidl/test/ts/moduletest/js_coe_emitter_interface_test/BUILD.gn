# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")

ZIDL_DIR = "../../../.."

config("zidl_module_test_config") {
  include_dirs = [
    "../common",
    "${ZIDL_DIR}/",
    "//utils/native/base/include/",
  ]
}

common_sources = [
  "${ZIDL_DIR}/ast/ast_array_type.cpp",
  "${ZIDL_DIR}/ast/ast_boolean_type.cpp",
  "${ZIDL_DIR}/ast/ast_byte_type.cpp",
  "${ZIDL_DIR}/ast/ast_char_type.cpp",
  "${ZIDL_DIR}/ast/ast_double_type.cpp",
  "${ZIDL_DIR}/ast/ast_float_type.cpp",
  "${ZIDL_DIR}/ast/ast_integer_type.cpp",
  "${ZIDL_DIR}/ast/ast_interface_type.cpp",
  "${ZIDL_DIR}/ast/ast_list_type.cpp",
  "${ZIDL_DIR}/ast/ast_long_type.cpp",
  "${ZIDL_DIR}/ast/ast_map_type.cpp",
  "${ZIDL_DIR}/ast/ast_method.cpp",
  "${ZIDL_DIR}/ast/ast_module.cpp",
  "${ZIDL_DIR}/ast/ast_namespace.cpp",
  "${ZIDL_DIR}/ast/ast_node.cpp",
  "${ZIDL_DIR}/ast/ast_parameter.cpp",
  "${ZIDL_DIR}/ast/ast_sequenceable_type.cpp",
  "${ZIDL_DIR}/ast/ast_short_type.cpp",
  "${ZIDL_DIR}/ast/ast_string_type.cpp",
  "${ZIDL_DIR}/ast/ast_type.cpp",
  "${ZIDL_DIR}/ast/ast_void_type.cpp",
]

common_sources += [
  "${ZIDL_DIR}/codegen/code_emitter.cpp",
  "${ZIDL_DIR}/codegen/code_generator.cpp",
  "${ZIDL_DIR}/codegen/cpp_code_emitter.cpp",
  "${ZIDL_DIR}/codegen/java_code_emitter.cpp",
  "${ZIDL_DIR}/codegen/js_code_emitter.cpp",
]

common_sources += [
  "${ZIDL_DIR}/metadata/metadata_builder.cpp",
  "${ZIDL_DIR}/metadata/metadata_dumper.cpp",
  "${ZIDL_DIR}/metadata/metadata_reader.cpp",
  "${ZIDL_DIR}/metadata/metadata_serializer.cpp",
]

common_sources += [
  "${ZIDL_DIR}/parser/lexer.cpp",
  "${ZIDL_DIR}/parser/parser.cpp",
]

common_sources += [
  "${ZIDL_DIR}/util/file.cpp",
  "${ZIDL_DIR}/util/light_refcount_base.cpp",
  "${ZIDL_DIR}/util/logger.cpp",
  "${ZIDL_DIR}/util/options.cpp",
  "${ZIDL_DIR}/util/string.cpp",
  "${ZIDL_DIR}/util/string_builder.cpp",
  "${ZIDL_DIR}/util/string_pool.cpp",
]
module_output_path = "zidl/zidl_moduletest"

ohos_moduletest("js_code_emitter_interface") {
  module_out_path = module_output_path
  configs = [ ":zidl_module_test_config" ]
  sources = [ "js_code_emitter_interface.cpp" ]
  sources += common_sources
  deps = [ "//utils/native/base:utilsecurec" ]
}

group("moduletest") {
  testonly = true
  deps = [ ":js_code_emitter_interface" ]
}
