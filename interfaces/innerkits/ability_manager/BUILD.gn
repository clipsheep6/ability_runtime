# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/aafwk/standard/aafwk.gni")

config("ability_manager_public_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include/",
    "${innerkits_path}/want/include",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "//foundation/aafwk/standard/interfaces/innerkits/want/include/ohos/aafwk/content",
    "//foundation/aafwk/standard/frameworks/kits/ability/native/include",
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler/include",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_core/include/bundlemgr",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_core/include/appmgr",
    "//foundation/appexecfwk/standard/kits/appkit/native/app/include",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("ability_manager") {
  sources = [
    "${services_path}/abilitymgr/src/ability_connect_callback_stub.cpp",
    "${services_path}/abilitymgr/src/ability_manager_client.cpp",
    "${services_path}/abilitymgr/src/ability_manager_proxy.cpp",
    "${services_path}/abilitymgr/src/ability_manager_stub.cpp",
    "${services_path}/abilitymgr/src/ability_mission_info.cpp",
    "${services_path}/abilitymgr/src/ability_record_info.cpp",
    "${services_path}/abilitymgr/src/ability_scheduler_proxy.cpp",
    "${services_path}/abilitymgr/src/ability_scheduler_stub.cpp",
    "${services_path}/abilitymgr/src/caller_info.cpp",
    "${services_path}/abilitymgr/src/image_info.cpp",
    "${services_path}/abilitymgr/src/lifecycle_state_info.cpp",
    "${services_path}/abilitymgr/src/mission_description_info.cpp",
    "${services_path}/abilitymgr/src/mission_record_info.cpp",
    "${services_path}/abilitymgr/src/mission_snapshot_info.cpp",
    "${services_path}/abilitymgr/src/mission_stack_info.cpp",
    "${services_path}/abilitymgr/src/sender_info.cpp",
    "${services_path}/abilitymgr/src/stack_info.cpp",
    "${services_path}/abilitymgr/src/want_sender_info.cpp",
    "${services_path}/abilitymgr/src/wants_info.cpp",
    "//foundation/aafwk/standard/frameworks/kits/ability/native/src/task_handler.cpp",
    "//foundation/aafwk/standard/frameworks/kits/ability/native/src/task_handler_client.cpp",
  ]

  public_configs = [
    ":ability_manager_public_config",
    "${services_path}/abilitymgr:abilityms_config",
  ]

  deps = [
    "${innerkits_path}/want:want",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:dummy_classes",
    "//foundation/appexecfwk/standard/common:libappexecfwk_common",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base:appexecfwk_base",
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
    "//foundation/distributedschedule/dmsfwk/interfaces/innerkits/uri:zuri",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]

  subsystem_name = "aafwk"
  part_name = "aafwk_standard"
}
