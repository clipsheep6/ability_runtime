# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/aafwk/standard/aafwk.gni")

module_output_path = "ans_standard/wantagent"

ohos_unittest("pending_want_test") {
  module_out_path = module_output_path
  include_dirs = [
    "//aafwk/standard/frameworks/kits/appkit/native/ability_runtime/context/",
    "${aafwk_path}/frameworks/kits/appkit/native/ability_runtime",
    "${aafwk_path}/services/abilitymgr/include",
    "//foundation/distributedschedule/samgr/adapter/interfaces/innerkits/include/",
    "//utils/native/base/include",
  ]

  sources = [ "pending_want_test.cpp" ]

  configs = [ "//utils/native/base:utils_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${aafwk_path}/frameworks/kits/appkit:app_context",
    "${aafwk_path}/frameworks/kits/appkit:appkit_native",
    "${aafwk_path}/frameworks/kits/wantagent:wantagent_innerkits",
    "${aafwk_path}/services/abilitymgr:abilityms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_core",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr_standard:samgr_proxy",
  ]
}

group("unittest") {
  testonly = true
  deps = [ ":pending_want_test" ]
}
