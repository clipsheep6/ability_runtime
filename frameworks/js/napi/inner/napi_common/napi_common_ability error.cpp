/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <dlfcn.h>
#include <uv.h>
#include "hilog_wrapper.h"
#include "napi_common_ability_error.h"

namespace OHOS {
namespace AppExecFwk {
const std::map<int32_t, int32_t> START_ABILITY_ERROR_CODE_MAP = {
    { NAPI_ERR_NO_ERROR, ERR_ABILITY_START_SUCCESS },
    { NAPI_ERR_NO_PERMISSION, ERR_PERMISSION_VERIFY_FAILED },
    { NAPI_ERR_ACE_ABILITY, ERR_ABILITY_QUERY_FAILED },
    { NAPI_ERR_PARAM_INVALID, ERR_PARAM_INVALID },
    { NAPI_ERR_ABILITY_TYPE_INVALID, ERR_ABILITY_QUERY_FAILED },
    { NAPI_ERR_ABILITY_CALL_INVALID, ERR_ABILITY_QUERY_FAILED },
    { ERR_OK, ERR_ABILITY_START_SUCCESS },
    { RESOLVE_ABILITY_ERR, ERR_ABILITY_QUERY_FAILED },
    { CHECK_PERMISSION_FAILED, ERR_PERMISSION_VERIFY_FAILED },
    { RESOLVE_CALL_NO_PERMISSIONS, ERR_PERMISSION_VERIFY_FAILED },
    { FA_FREE_INSTALL_QUERY_ERROR, ERR_ABILITY_QUERY_FAILED },
    { HAG_QUERY_TIMEOUT, ERR_ABILITY_QUERY_FAILED },
    { FA_NETWORK_UNAVAILABLE, ERR_NETWORK_UNAVAILABLE },
    { FA_FREE_INSTALL_SERVICE_ERROR, ERR_SYSTEM_ERROR },
    { FA_CRASH, ERR_SYSTEM_ERROR },
    { FA_TIMEOUT, ERR_SYSTEM_ERROR },
    { UNKNOWN_EXCEPTION, ERR_SYSTEM_ERROR },
    { NOT_SUPPORT_PA_ON_SAME_DEVICE, ERR_SYSTEM_ERROR },
    { FA_INTERNET_ERROR, ERR_SYSTEM_ERROR },
    { JUMP_TO_THE_APPLICATION_MARKET_UPGRADE, ERR_SYSTEM_ERROR },
    { USER_GIVES_UP, ERR_LOADING_ERROR },
    { INSTALLATION_ERROR_IN_FREE_INSTALL, ERR_LOADING_ERROR },
    { HAP_PACKAGE_DOWNLOAD_TIMED_OUT, ERR_LOADING_ERROR },
    { CONCURRENT_TASKS_WAITING_FOR_RETRY, ERR_CONCURRENT_TASKS_WAITING_FOR_RETRY },
    { FA_PACKAGE_DOES_NOT_SUPPORT_FREE_INSTALL, ERR_FREE_INSTALL_NOT_SUPPORTED },
    { NOT_ALLOWED_TO_PULL_THIS_FA, ERR_SERVICE_ERROR },
    { NOT_SUPPORT_CROSS_DEVICE_FREE_INSTALL_PA, ERR_SERVICE_ERROR },
    { DMS_PERMISSION_DENIED, ERR_PERMISSION_VERIFY_FAILED },
    { DMS_COMPONENT_ACCESS_PERMISSION_DENIED, ERR_PERMISSION_VERIFY_FAILED },
    { DMS_ACCOUNT_ACCESS_PERMISSION_DENIED, ERR_PERMISSION_VERIFY_FAILED },
    { INVALID_PARAMETERS_ERR, ERR_PARAMETER_INVALID },
    { INVALID_REMOTE_PARAMETERS_ERR, ERR_PARAMETER_INVALID },
    { REMOTE_DEVICE_NOT_COMPATIBLE, ERR_REMOTE_INCOMPATIBLE },
    { DEVICE_OFFLINE_ERR, ERR_DEVICE_OFFLINE },
    { FREE_INSTALL_TIMEOUT, ERR_FREE_INSTALL_TIMEOUT },
    { NOT_TOP_ABILITY, ERR_NOT_TOP_ABILITY },
    { TARGET_BUNDLE_NOT_EXIST, ERR_TARGET_BUNDLE_NOT_EXIST },
    { CONTINUE_FREE_INSTALL_FAILED, ERR_CONTINUE_FREE_INSTALL_FAILED }
};

int32_t GetStartAbilityErrorCode(ErrCode innerErrorCode)
{
    auto iter = START_ABILITY_ERROR_CODE_MAP.find(innerErrorCode);
    if (iter != START_ABILITY_ERROR_CODE_MAP.end()) {
        return iter->second;
    }
    return ERR_ABILITY_QUERY_FAILED;
}
}  // namespace AppExecFwk
}  // namespace OHOS
