diff --git a/frameworks/js/napi/ability/ability.js b/frameworks/js/napi/ability/ability.js
index 0180aab80..f634111e0 100644
--- a/frameworks/js/napi/ability/ability.js
+++ b/frameworks/js/napi/ability/ability.js
@@ -25,6 +25,7 @@ class Ability {
     onWindowStageDestroy() {}
     onForeground(want) {}
     onBackground() {}
+    onMemoryLevel(level) {}
     onWindowStageRestore(windowStage) {}
     onCallRequest() {
         console.log("Ability::onCallRequest callee is " + typeof this.callee + " " + this.callee);
diff --git a/frameworks/native/ability/native/ability_impl.cpp b/frameworks/native/ability/native/ability_impl.cpp
index ad704f815..01d38088c 100644
--- a/frameworks/native/ability/native/ability_impl.cpp
+++ b/frameworks/native/ability/native/ability_impl.cpp
@@ -710,6 +710,15 @@ void AbilityImpl::NotifyContinuationResult(int32_t result)
     ability_->OnCompleteContinuation(result);
 }
 
+void AbilityImpl::NotifyMemoryLevel(int32_t level)
+{
+    if (ability_ == nullptr) {
+        HILOG_ERROR("AbilityImpl::NotifyMemoryLevel ability_ is nullptr");
+        return;
+    }
+    ability_->OnMemoryLevel(level);
+}
+
 #ifdef SUPPORT_GRAPHICS
 void AbilityImpl::AfterUnFocused()
 {
diff --git a/frameworks/native/ability/native/ability_runtime/js_ability.cpp b/frameworks/native/ability/native/ability_runtime/js_ability.cpp
index 89b72307b..21b15cd8e 100644
--- a/frameworks/native/ability/native/ability_runtime/js_ability.cpp
+++ b/frameworks/native/ability/native/ability_runtime/js_ability.cpp
@@ -528,6 +528,33 @@ void JsAbility::OnConfigurationUpdated(const Configuration &configuration)
     CallObjectMethod("onConfigurationUpdated", &jsConfiguration, 1);
 }
 
+void JsAbility::OnMemoryLevel(int level)
+{
+    Ability::OnMemoryLevel(level);
+    HILOG_INFO("%{public}s called.", __func__);
+
+    HandleScope handleScope(jsRuntime_);
+    auto &nativeEngine = jsRuntime_.GetNativeEngine();
+
+    NativeValue *value = jsAbilityObj_->Get();
+    NativeObject *obj = ConvertNativeValueTo<NativeObject>(value);
+    if (obj == nullptr) {
+        HILOG_ERROR("Failed to get Ability object");
+        return;
+    }
+
+    //napi_value napiWant = OHOS::AppExecFwk::WrapWant(reinterpret_cast<napi_env>(&nativeEngine), want);
+    NativeValue *jslevel = reinterpret_cast<NativeValue *>(level);
+
+    NativeValue *argv[] = {
+        jslevel,
+        CreateJsLaunchParam(nativeEngine, GetLaunchParam()),
+    };
+    CallObjectMethod("onMemoryLevel", argv, ArraySize(argv));
+
+    HILOG_INFO("%{public}s end.", __func__);
+}
+
 void JsAbility::UpdateContextConfiguration()
 {
     HILOG_INFO("%{public}s called.", __func__);
diff --git a/frameworks/native/ability/native/ability_thread.cpp b/frameworks/native/ability/native/ability_thread.cpp
index cc7813da4..3ff16ee46 100644
--- a/frameworks/native/ability/native/ability_thread.cpp
+++ b/frameworks/native/ability/native/ability_thread.cpp
@@ -1175,6 +1175,16 @@ void AbilityThread::NotifyContinuationResult(int32_t result)
     abilityImpl_->NotifyContinuationResult(result);
 }
 
+void AbilityThread::NotifyMemoryLevel(int32_t level)
+{
+    HILOG_INFO("NotifyMemoryLevel, result:%{public}d", level);
+    if (abilityImpl_ == nullptr) {
+        HILOG_ERROR("AbilityThread::NotifyMemoryLevel abilityImpl_ is nullptr");
+        return;
+    }
+    abilityImpl_->NotifyMemoryLevel(level);
+}
+
 /**
  * @description: Attach The ability thread to the main process.
  * @param application Indicates the main process.
diff --git a/frameworks/native/appkit/ability_runtime/app/ability_stage.cpp b/frameworks/native/appkit/ability_runtime/app/ability_stage.cpp
index ca75d8ed2..fb7fa5510 100644
--- a/frameworks/native/appkit/ability_runtime/app/ability_stage.cpp
+++ b/frameworks/native/appkit/ability_runtime/app/ability_stage.cpp
@@ -97,5 +97,11 @@ void AbilityStage::OnConfigurationUpdated(const AppExecFwk::Configuration& confi
 {
     HILOG_INFO("%{public}s called.", __func__);
 }
+
+void AbilityStage::OnMemoryLevel(const int level)
+{
+    HILOG_INFO("%{public}s called.", __func__);
+}
+
 }  // namespace AbilityRuntime
 }  // namespace OHOS
diff --git a/frameworks/native/appkit/app/main_thread.cpp b/frameworks/native/appkit/app/main_thread.cpp
index 49707891f..a0f16938f 100644
--- a/frameworks/native/appkit/app/main_thread.cpp
+++ b/frameworks/native/appkit/app/main_thread.cpp
@@ -381,6 +381,31 @@ void MainThread::ScheduleShrinkMemory(const int level)
     HILOG_INFO("MainThread::scheduleShrinkMemory level: %{public}d end.", level);
 }
 
+/**
+ *
+ * @brief Notify the memory level.
+ *
+ * @param level Indicates the memory trim level, which shows the current memory usage status.
+ */
+void MainThread::ScheduleMemoryLevel(const int level)
+{
+    HILOG_INFO("MainThread::ScheduleMemoryLevel level: %{public}d", level);
+    wptr<MainThread> weak = this;
+    auto task = [weak, level]() {
+        auto appThread = weak.promote();
+        if (appThread == nullptr) {
+            HILOG_ERROR("appThread is nullptr, HandleMemoryLevel failed.");
+            return;
+        }
+        appThread->HandleMemoryLevel(level);
+    };
+
+    if (!mainHandler_->PostTask(task)) {
+        HILOG_ERROR("MainThread::ScheduleMemoryLevel PostTask task failed");
+    }
+    HILOG_INFO("MainThread::ScheduleMemoryLevel level: %{public}d end.", level);
+}
+
 /**
  *
  * @brief Schedule the application process exit safely.
@@ -1510,6 +1535,31 @@ void MainThread::HandleShrinkMemory(const int level)
     HILOG_INFO("MainThread::HandleShrinkMemory called end.");
 }
 
+
+/**
+ *
+ * @brief Notify the memory level.
+ *
+ * @param level Indicates the memory trim level, which shows the current memory usage status.
+ *
+ */
+void MainThread::HandleMemoryLevel(const int level)
+{
+    HITRACE_METER_NAME(HITRACE_TAG_APP, __PRETTY_FUNCTION__);
+    HILOG_INFO("MainThread::HandleMemoryLevel called start.");
+
+    if (application_ == nullptr) {
+        HILOG_ERROR("MainThread::HandleMemoryLevel error! application_ is null");
+        return;
+    }
+
+    application_->OnMemoryLevel(level);
+    HILOG_INFO("MainThread::HandleMemoryLevel called end.");
+
+}
+
+
+
 /**
  *
  * @brief send the new config to the application.
diff --git a/frameworks/native/appkit/app/ohos_application.cpp b/frameworks/native/appkit/app/ohos_application.cpp
index ce8c1e0ba..02e85dda9 100644
--- a/frameworks/native/appkit/app/ohos_application.cpp
+++ b/frameworks/native/appkit/app/ohos_application.cpp
@@ -435,6 +435,23 @@ void OHOSApplication::OnConfigurationUpdated(const Configuration &config)
 void OHOSApplication::OnMemoryLevel(int level)
 {
     HILOG_INFO("OHOSApplication::OnMemoryLevel: called");
+
+    HILOG_INFO("Number of ability to be notified : [%{public}d]", static_cast<int>(abilityRecordMgr_->GetRecordCount()));
+    for (const auto &abilityToken : abilityRecordMgr_->GetAllTokens()) {
+        auto abilityRecord = abilityRecordMgr_->GetAbilityItem(abilityToken);
+        if (abilityRecord && abilityRecord->GetAbilityThread()) {
+            abilityRecord->GetAbilityThread()->NotifyMemoryLevel(level);
+        }
+    }
+
+    HILOG_INFO("Number of abilityStage to be notified : [%{public}zu]", abilityStages_.size());
+    for (auto it = abilityStages_.begin(); it != abilityStages_.end(); it++) {
+        auto abilityStage = it->second;
+        if (abilityStage) {
+            abilityStage->OnMemoryLevel(level);
+        }
+    }
+
     for (auto callback : elementsCallbacks_) {
         if (callback != nullptr) {
             callback->OnMemoryLevel(level);
diff --git a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_client.h b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_client.h
index f5ea685c1..72b092b00 100644
--- a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_client.h
+++ b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_client.h
@@ -163,6 +163,15 @@ public:
      */
     virtual AppMgrResultCode GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId);
 
+    /**
+     * NotifyMemoryLevel, call NotifyMemoryLevel() through proxy project.
+     * Notify abilities background the current memory level.
+     *
+     * @param level, the current memory level
+     * @return ERR_OK ,return back success，others fail.
+     */
+    virtual AppMgrResultCode NotifyMemoryLevel(int32_t level);
+
     /**
      * GetConfiguration
      *
diff --git a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_interface.h b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_interface.h
index d99c40813..f44c68b71 100644
--- a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_interface.h
+++ b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_interface.h
@@ -125,6 +125,15 @@ public:
      */
     virtual int GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId) = 0;
 
+    /**
+     * NotifyMemoryLevel, call NotifyMemoryLevel() through proxy project.
+     * Notify abilities background the current memory level.
+     *
+     * @param level, the current memory level
+     * @return ERR_OK ,return back success，others fail.
+     */
+    virtual int NotifyMemoryLevel(int32_t level) = 0;
+
     /**
      * Get system memory information.
      * @param SystemMemoryAttr, memory information.
@@ -250,6 +259,7 @@ public:
         APP_CLEAR_UP_APPLICATION_DATA,
         APP_GET_ALL_RUNNING_PROCESSES,
         APP_GET_RUNNING_PROCESSES_BY_USER_ID,
+        APP_NOTIFY_MEMORY_LEVEL,
         APP_GET_SYSTEM_MEMORY_ATTR,
         APP_ADD_ABILITY_STAGE_INFO_DONE,
         STARTUP_RESIDENT_PROCESS,
diff --git a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_proxy.h b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_proxy.h
index 226fbb001..a12082427 100644
--- a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_proxy.h
+++ b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_proxy.h
@@ -116,6 +116,15 @@ public:
      */
     virtual int32_t GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId) override;
 
+    /**
+     * NotifyMemoryLevel, call NotifyMemoryLevel() through proxy project.
+     * Notify abilities background the current memory level.
+     *
+     * @param level, the current memory level
+     * @return ERR_OK ,return back success，others fail.
+     */
+    virtual int32_t NotifyMemoryLevel(int32_t level) override;
+
     /**
      * Get system memory information.
      * @param SystemMemoryAttr, memory information.
diff --git a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_stub.h b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_stub.h
index 67fb9228c..189cc2045 100644
--- a/interfaces/inner_api/app_manager/include/appmgr/app_mgr_stub.h
+++ b/interfaces/inner_api/app_manager/include/appmgr/app_mgr_stub.h
@@ -65,6 +65,7 @@ private:
     int32_t HandleClearUpApplicationData(MessageParcel &data, MessageParcel &reply);
     int32_t HandleGetAllRunningProcesses(MessageParcel &data, MessageParcel &reply);
     int32_t HandleGetProcessRunningInfosByUserId(MessageParcel &data, MessageParcel &reply);
+    int32_t HandleNotifyMemoryLevel(MessageParcel &data, MessageParcel &reply);
     int32_t HandleGetSystemMemoryAttr(MessageParcel &data, MessageParcel &reply);
     int32_t HandleAddAbilityStageDone(MessageParcel &data, MessageParcel &reply);
     int32_t HandleStartupResidentProcess(MessageParcel &data, MessageParcel &reply);
diff --git a/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_host.h b/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_host.h
index cdaa8d33d..b9f7f8778 100644
--- a/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_host.h
+++ b/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_host.h
@@ -40,6 +40,7 @@ private:
     int32_t HandleScheduleTerminateApplication(MessageParcel &data, MessageParcel &reply);
     int32_t HandleScheduleLowMemory(MessageParcel &data, MessageParcel &reply);
     int32_t HandleScheduleShrinkMemory(MessageParcel &data, MessageParcel &reply);
+    int32_t HandleScheduleMemoryLevel(MessageParcel &data, MessageParcel &reply);
     int32_t HandleScheduleLaunchAbility(MessageParcel &data, MessageParcel &reply);
     int32_t HandleScheduleCleanAbility(MessageParcel &data, MessageParcel &reply);
     int32_t HandleScheduleLaunchApplication(MessageParcel &data, MessageParcel &reply);
diff --git a/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_interface.h b/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_interface.h
index c54b5b290..3eeb31c8c 100644
--- a/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_interface.h
+++ b/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_interface.h
@@ -71,6 +71,14 @@ public:
      */
     virtual void ScheduleLowMemory() = 0;
 
+    /**
+     * ScheduleMemoryLevel, call ScheduleMemoryLevel() through proxy project,
+     * Notify applications background the current memory level.
+     *
+     * @return
+     */
+    virtual void ScheduleMemoryLevel(int32_t level) = 0;
+
     /**
      * ScheduleLaunchApplication, call ScheduleLaunchApplication() through proxy project,
      * Notify application to launch application.
@@ -136,6 +144,7 @@ public:
         SCHEDULE_BACKGROUND_APPLICATION_TRANSACTION,
         SCHEDULE_TERMINATE_APPLICATION_TRANSACTION,
         SCHEDULE_LOWMEMORY_APPLICATION_TRANSACTION,
+        SCHEDULE_MEMORYLEVEL_APPLICATION_TRANSACTION,
         SCHEDULE_SHRINK_MEMORY_APPLICATION_TRANSACTION,
         SCHEDULE_LAUNCH_ABILITY_TRANSACTION,
         SCHEDULE_CLEAN_ABILITY_TRANSACTION,
diff --git a/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_proxy.h b/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_proxy.h
index 095833b54..faad14ec9 100644
--- a/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_proxy.h
+++ b/interfaces/inner_api/app_manager/include/appmgr/app_scheduler_proxy.h
@@ -68,6 +68,14 @@ public:
      */
     virtual void ScheduleLowMemory() override;
 
+    /**
+     * ScheduleMemoryLevel, call ScheduleMemoryLevel() through proxy project,
+     * Notify applications background the current memory level.
+     *
+     * @return
+     */
+    virtual void ScheduleMemoryLevel(int32_t level) override;
+
     /**
      * ScheduleLaunchApplication, call ScheduleLaunchApplication() through proxy project,
      * Notify application to launch application.
diff --git a/interfaces/inner_api/app_manager/src/appmgr/app_mgr_client.cpp b/interfaces/inner_api/app_manager/src/appmgr/app_mgr_client.cpp
index bba419384..0d4b74459 100644
--- a/interfaces/inner_api/app_manager/src/appmgr/app_mgr_client.cpp
+++ b/interfaces/inner_api/app_manager/src/appmgr/app_mgr_client.cpp
@@ -303,6 +303,19 @@ AppMgrResultCode AppMgrClient::GetProcessRunningInfosByUserId(std::vector<Runnin
     return AppMgrResultCode::ERROR_SERVICE_NOT_CONNECTED;
 }
 
+AppMgrResultCode AppMgrClient::NotifyMemoryLevel(int32_t level)
+{
+    sptr<IAppMgr> service = iface_cast<IAppMgr>(mgrHolder_->GetRemoteObject());
+    if (service!=nullptr){
+        int32_t result = service->NotifyMemoryLevel(level);
+        if (result == ERR_OK) {
+            return AppMgrResultCode::RESULT_OK;
+        }
+        return AppMgrResultCode::ERROR_SERVICE_NOT_READY; 
+    }
+    return AppMgrResultCode::ERROR_SERVICE_NOT_CONNECTED;
+}
+
 AppMgrResultCode AppMgrClient::GetConfiguration(Configuration& config)
 {
     sptr<IAppMgr> service = iface_cast<IAppMgr>(mgrHolder_->GetRemoteObject());
diff --git a/interfaces/inner_api/app_manager/src/appmgr/app_mgr_proxy.cpp b/interfaces/inner_api/app_manager/src/appmgr/app_mgr_proxy.cpp
index 8697da9f8..1291ad18e 100644
--- a/interfaces/inner_api/app_manager/src/appmgr/app_mgr_proxy.cpp
+++ b/interfaces/inner_api/app_manager/src/appmgr/app_mgr_proxy.cpp
@@ -266,6 +266,30 @@ int32_t AppMgrProxy::GetProcessRunningInfosByUserId(std::vector<RunningProcessIn
     return result;
 }
 
+int32_t AppMgrProxy::NotifyMemoryLevel(int32_t level)
+{
+    MessageParcel data;
+    MessageParcel reply;
+    MessageOption option(MessageOption::TF_SYNC);
+
+    if (!WriteInterfaceToken(data)) {
+        return ERR_FLATTEN_OBJECT;
+    }
+    data.WriteInt32(level);
+    sptr<IRemoteObject> remote = Remote();
+    if (remote == nullptr) {
+        HILOG_ERROR("Remote() is NULL");
+        return ERR_NULL_OBJECT;
+    }
+    int32_t ret =
+        remote->SendRequest(static_cast<uint32_t>(IAppMgr::Message::APP_NOTIFY_MEMORY_LEVEL), data, reply, option);
+    if (ret != NO_ERROR) {
+        HILOG_WARN("SendRequest is failed, error code: %{public}d", ret);
+    }
+    int result = reply.ReadInt32();
+    return result;
+}
+
 bool AppMgrProxy::SendTransactCmd(IAppMgr::Message code, MessageParcel &data, MessageParcel &reply)
 {
     MessageOption option(MessageOption::TF_SYNC);
diff --git a/interfaces/inner_api/app_manager/src/appmgr/app_mgr_stub.cpp b/interfaces/inner_api/app_manager/src/appmgr/app_mgr_stub.cpp
index 753433bd8..deeea3547 100644
--- a/interfaces/inner_api/app_manager/src/appmgr/app_mgr_stub.cpp
+++ b/interfaces/inner_api/app_manager/src/appmgr/app_mgr_stub.cpp
@@ -52,6 +52,8 @@ AppMgrStub::AppMgrStub()
         &AppMgrStub::HandleGetAllRunningProcesses;
     memberFuncMap_[static_cast<uint32_t>(IAppMgr::Message::APP_GET_RUNNING_PROCESSES_BY_USER_ID)] =
         &AppMgrStub::HandleGetProcessRunningInfosByUserId;
+    memberFuncMap_[static_cast<uint32_t>(IAppMgr::Message::APP_NOTIFY_MEMORY_LEVEL)] =
+        &AppMgrStub::HandleNotifyMemoryLevel;
     memberFuncMap_[static_cast<uint32_t>(IAppMgr::Message::APP_GET_SYSTEM_MEMORY_ATTR)] =
         &AppMgrStub::HandleGetSystemMemoryAttr;
     memberFuncMap_[static_cast<uint32_t>(IAppMgr::Message::APP_ADD_ABILITY_STAGE_INFO_DONE)] =
@@ -226,6 +228,20 @@ int32_t AppMgrStub::HandleGetProcessRunningInfosByUserId(MessageParcel &data, Me
     return NO_ERROR;
 }
 
+
+int32_t AppMgrStub::HandleNotifyMemoryLevel(MessageParcel &data, MessageParcel &reply)
+{
+    HITRACE_METER(HITRACE_TAG_APP);
+    int32_t  level= data.ReadInt32();
+    auto result = NotifyMemoryLevel(level);
+    if (!reply.WriteInt32(result)) {
+        return ERR_INVALID_VALUE;
+    }
+    return NO_ERROR;
+}
+
+
+
 int32_t AppMgrStub::HandleGetSystemMemoryAttr(MessageParcel &data, MessageParcel &reply)
 {
     HITRACE_METER(HITRACE_TAG_APP);
diff --git a/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_host.cpp b/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_host.cpp
index 38abee88a..9665426d2 100644
--- a/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_host.cpp
+++ b/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_host.cpp
@@ -34,6 +34,8 @@ AppSchedulerHost::AppSchedulerHost()
         &AppSchedulerHost::HandleScheduleLowMemory;
     memberFuncMap_[static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_SHRINK_MEMORY_APPLICATION_TRANSACTION)] =
         &AppSchedulerHost::HandleScheduleShrinkMemory;
+    memberFuncMap_[static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_MEMORYLEVEL_APPLICATION_TRANSACTION)] =
+        &AppSchedulerHost::HandleScheduleMemoryLevel;
     memberFuncMap_[static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_LAUNCH_ABILITY_TRANSACTION)] =
         &AppSchedulerHost::HandleScheduleLaunchAbility;
     memberFuncMap_[static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_CLEAN_ABILITY_TRANSACTION)] =
@@ -112,6 +114,13 @@ int32_t AppSchedulerHost::HandleScheduleShrinkMemory(MessageParcel &data, Messag
     return NO_ERROR;
 }
 
+int32_t AppSchedulerHost::HandleScheduleMemoryLevel(MessageParcel &data, MessageParcel &reply)
+{
+    HITRACE_METER(HITRACE_TAG_APP);
+    ScheduleMemoryLevel(data.ReadInt32());
+    return NO_ERROR;
+}
+
 int32_t AppSchedulerHost::HandleScheduleLaunchAbility(MessageParcel &data, MessageParcel &reply)
 {
     HITRACE_METER(HITRACE_TAG_APP);
diff --git a/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_proxy.cpp b/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_proxy.cpp
index 7b99a0467..a6ad00cee 100644
--- a/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_proxy.cpp
+++ b/interfaces/inner_api/app_manager/src/appmgr/app_scheduler_proxy.cpp
@@ -119,6 +119,27 @@ void AppSchedulerProxy::ScheduleLowMemory()
     }
 }
 
+void AppSchedulerProxy::ScheduleMemoryLevel(int32_t level)
+{
+    MessageParcel data;
+    MessageParcel reply;
+    MessageOption option(MessageOption::TF_ASYNC);
+    if (!WriteInterfaceToken(data)) {
+        return;
+    }
+    data.WriteInt32(level);
+    sptr<IRemoteObject> remote = Remote();
+    if (remote == nullptr) {
+        HILOG_ERROR("Remote() is NULL");
+        return;
+    }
+    int32_t ret = remote->SendRequest(
+        static_cast<uint32_t>(IAppScheduler::Message::SCHEDULE_MEMORYLEVEL_APPLICATION_TRANSACTION), data, reply, option);
+    if (ret != NO_ERROR) {
+        HILOG_WARN("SendRequest is failed, error code: %{public}d", ret);
+    }
+}
+
 void AppSchedulerProxy::ScheduleShrinkMemory(const int32_t level)
 {
     MessageParcel data;
diff --git a/interfaces/kits/native/ability/native/ability_impl.h b/interfaces/kits/native/ability/native/ability_impl.h
index 9d5a0ac9e..443e68404 100644
--- a/interfaces/kits/native/ability/native/ability_impl.h
+++ b/interfaces/kits/native/ability/native/ability_impl.h
@@ -311,6 +311,15 @@ public:
      */
     virtual void NotifyContinuationResult(int32_t result);
 
+    /**
+     * @brief Notify current memory level to ability.
+     *
+     * @param level Current memory level.
+     *
+     * @return
+     */
+    virtual void NotifyMemoryLevel(int32_t level);
+
     bool IsStageBasedModel() const;
 
 #ifdef SUPPORT_GRAPHICS
diff --git a/interfaces/kits/native/ability/native/ability_runtime/js_ability.h b/interfaces/kits/native/ability/native/ability_runtime/js_ability.h
index b729bf9e0..7e3c28ace 100644
--- a/interfaces/kits/native/ability/native/ability_runtime/js_ability.h
+++ b/interfaces/kits/native/ability/native/ability_runtime/js_ability.h
@@ -49,6 +49,7 @@ public:
     int32_t OnContinue(WantParams &wantParams) override;
     void OnConfigurationUpdated(const Configuration &configuration) override;
     void UpdateContextConfiguration() override;
+    void OnMemoryLevel(int level) override;
     void OnNewWant(const Want &want) override;
 
     void OnAbilityResult(int requestCode, int resultCode, const Want &resultData) override;
diff --git a/interfaces/kits/native/ability/native/ability_thread.h b/interfaces/kits/native/ability/native/ability_thread.h
index eb8c389ce..949cbba45 100644
--- a/interfaces/kits/native/ability/native/ability_thread.h
+++ b/interfaces/kits/native/ability/native/ability_thread.h
@@ -301,6 +301,13 @@ public:
      */
     void NotifyContinuationResult(int32_t result);
 
+    /**
+     * @brief notify this ability current memory level.
+     *
+     * @param level: Current memory level
+     */
+    void NotifyMemoryLevel(int32_t level);
+
     /**
      * @brief Converts the given uri that refer to the Data ability into a normalized URI. A normalized URI can be used
      * across devices, persisted, backed up, and restored. It can refer to the same item in the Data ability even if the
diff --git a/interfaces/kits/native/appkit/ability_runtime/app/ability_stage.h b/interfaces/kits/native/appkit/ability_runtime/app/ability_stage.h
index c6823dd2d..500699d63 100644
--- a/interfaces/kits/native/appkit/ability_runtime/app/ability_stage.h
+++ b/interfaces/kits/native/appkit/ability_runtime/app/ability_stage.h
@@ -52,6 +52,7 @@ public:
     void RemoveAbility(const sptr<IRemoteObject> &token);
     bool ContainsAbility();
     virtual void OnConfigurationUpdated(const AppExecFwk::Configuration& configuration);
+    virtual void OnMemoryLevel(const int level);
 
 private:
     std::shared_ptr<Context> context_;
diff --git a/interfaces/kits/native/appkit/app/main_thread.h b/interfaces/kits/native/appkit/app/main_thread.h
index 5adcfd0c3..56da99c9e 100644
--- a/interfaces/kits/native/appkit/app/main_thread.h
+++ b/interfaces/kits/native/appkit/app/main_thread.h
@@ -141,6 +141,14 @@ public:
      */
     void ScheduleShrinkMemory(const int level) override;
 
+    /**
+     *
+     * @brief Notify the current memory.
+     *
+     * @param level Indicates the memory trim level, which shows the current memory usage status.
+     */
+    void ScheduleMemoryLevel(const int level) override;
+
     /**
      *
      * @brief Low the memory which used by application.
@@ -302,6 +310,15 @@ private:
      */
     void HandleShrinkMemory(const int level);
 
+    /**
+     *
+     * @brief Notify the memory.
+     *
+     * @param level Indicates the memory trim level, which shows the current memory usage status.
+     *
+     */
+    void HandleMemoryLevel(const int level);
+
     /**
      *
      * @brief send the new config to the application.
diff --git a/services/appmgr/include/app_lifecycle_deal.h b/services/appmgr/include/app_lifecycle_deal.h
index f962bca7d..b8f33e746 100644
--- a/services/appmgr/include/app_lifecycle_deal.h
+++ b/services/appmgr/include/app_lifecycle_deal.h
@@ -92,6 +92,16 @@ public:
      */
     void ScheduleTrimMemory(int32_t timeLevel);
 
+    /**
+     * ScheduleMemoryLevel, call ScheduleMemorylevel() through proxy project,
+     * Notifies the application of the current memory.
+     *
+     * @param The memory level.
+     *
+     * @return
+     */
+    void ScheduleMemoryLevel(int32_t Level);
+
     /**
      * LowMemoryWarning, call ScheduleLowMemory() through proxy project,
      * Notify application to low memory.
diff --git a/services/appmgr/include/app_mgr_service.h b/services/appmgr/include/app_mgr_service.h
index f0d989840..3dd815f3a 100644
--- a/services/appmgr/include/app_mgr_service.h
+++ b/services/appmgr/include/app_mgr_service.h
@@ -134,6 +134,15 @@ public:
      */
     virtual int32_t GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId) override;
 
+    /**
+     * NotifyMemoryLevel, call NotifyMemoryLevel() through proxy project.
+     * Notify applications background the current memory level.
+     *
+     * @param level, current memory level.
+     * @return ERR_OK ,return back success，others fail.
+     */
+    virtual int32_t NotifyMemoryLevel(int32_t level) override;
+
     // the function about system
     /**
      * CheckPermission, call CheckPermission() through proxy object, check the permission.
diff --git a/services/appmgr/include/app_mgr_service_inner.h b/services/appmgr/include/app_mgr_service_inner.h
index c617edac8..39a5029fe 100644
--- a/services/appmgr/include/app_mgr_service_inner.h
+++ b/services/appmgr/include/app_mgr_service_inner.h
@@ -253,6 +253,15 @@ public:
      */
     virtual int32_t GetProcessRunningInfosByUserId(std::vector<RunningProcessInfo> &info, int32_t userId);
 
+    /**
+     * NotifyMemoryLevel, Notify applications background the current memory level.
+     *
+     * @param level, current memory level.
+     *
+     * @return ERR_OK ,return back success，others fail.
+     */
+    virtual int32_t NotifyMemoryLevel(int32_t level);
+
     std::shared_ptr<AppRunningRecord> CreateAppRunningRecord(
         const sptr<IRemoteObject> &token,
         const sptr<IRemoteObject> &preToken,
diff --git a/services/appmgr/include/app_running_record.h b/services/appmgr/include/app_running_record.h
index 5616845f0..8039ae259 100644
--- a/services/appmgr/include/app_running_record.h
+++ b/services/appmgr/include/app_running_record.h
@@ -341,6 +341,13 @@ public:
      */
     void ScheduleTrimMemory();
 
+    /**
+     * ScheduleMemoryLevel, Notifies the application of the current memory.
+     *
+     * @return
+     */
+    void ScheduleMemoryLevel(int32_t level);
+
     /**
      * GetAbilityRunningRecordByToken, Obtaining the ability record through token.
      *
diff --git a/services/appmgr/src/app_lifecycle_deal.cpp b/services/appmgr/src/app_lifecycle_deal.cpp
index d21283fc8..2ead7a8a5 100644
--- a/services/appmgr/src/app_lifecycle_deal.cpp
+++ b/services/appmgr/src/app_lifecycle_deal.cpp
@@ -92,6 +92,16 @@ void AppLifeCycleDeal::ScheduleTrimMemory(int32_t timeLevel)
     appThread_->ScheduleShrinkMemory(timeLevel);
 }
 
+void AppLifeCycleDeal::ScheduleMemoryLevel(int32_t Level)
+{
+    if (!appThread_) {
+        HILOG_ERROR("appThread_ is nullptr");
+        return;
+    }
+
+    appThread_->ScheduleMemoryLevel(Level);
+}
+
 void AppLifeCycleDeal::LowMemoryWarning()
 {
     if (!appThread_) {
diff --git a/services/appmgr/src/app_mgr_service.cpp b/services/appmgr/src/app_mgr_service.cpp
index 75000ae6e..b183ad460 100644
--- a/services/appmgr/src/app_mgr_service.cpp
+++ b/services/appmgr/src/app_mgr_service.cpp
@@ -305,6 +305,14 @@ int32_t AppMgrService::GetProcessRunningInfosByUserId(std::vector<RunningProcess
     return appMgrServiceInner_->GetProcessRunningInfosByUserId(info, userId);
 }
 
+int32_t AppMgrService::NotifyMemoryLevel(int32_t level)
+{
+    if (!IsReady()) {
+        return ERR_INVALID_OPERATION;
+    }
+    return appMgrServiceInner_->NotifyMemoryLevel(level);
+}
+
 /**
  * Get system memory information.
  * @param SystemMemoryAttr, memory information.
diff --git a/services/appmgr/src/app_mgr_service_inner.cpp b/services/appmgr/src/app_mgr_service_inner.cpp
index d8d3285ff..5b5bb7620 100644
--- a/services/appmgr/src/app_mgr_service_inner.cpp
+++ b/services/appmgr/src/app_mgr_service_inner.cpp
@@ -686,6 +686,18 @@ int32_t AppMgrServiceInner::GetProcessRunningInfosByUserId(std::vector<RunningPr
     return ERR_OK;
 }
 
+int32_t AppMgrServiceInner::NotifyMemoryLevel(int32_t level)
+{
+    for (const auto &item : appRunningManager_->GetAppRunningRecordMap()) {
+        //appRecord是AppRunningRecord类型的
+        const auto &appRecord = item.second;
+        if (appRecord->GetState()==ApplicationState::APP_STATE_BACKGROUND) {
+            appRecord->ScheduleMemoryLevel(level);
+        }
+    }
+    return ERR_OK;
+}
+
 void AppMgrServiceInner::GetRunningProcesses(const std::shared_ptr<AppRunningRecord> &appRecord,
     std::vector<RunningProcessInfo> &info)
 {
diff --git a/services/appmgr/src/app_running_record.cpp b/services/appmgr/src/app_running_record.cpp
index b68dcf93b..369857010 100644
--- a/services/appmgr/src/app_running_record.cpp
+++ b/services/appmgr/src/app_running_record.cpp
@@ -458,6 +458,13 @@ void AppRunningRecord::ScheduleTrimMemory()
     }
 }
 
+void AppRunningRecord::ScheduleMemoryLevel(int32_t level)
+{
+    if (appLifeCycleDeal_) {
+        appLifeCycleDeal_->ScheduleMemoryLevel(level);
+    }
+}
+
 void AppRunningRecord::LowMemoryWarning()
 {
     if (appLifeCycleDeal_) {
